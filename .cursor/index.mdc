# R-Track-Workout Project Guidelines

## Project Overview
A React Native mobile-first workout tracking application with offline-first persistence, designed specifically for Android deployment. The app features large, gym-friendly buttons and minimal text input for users who are out of breath, sweating, and distracted during workouts.

## Tech Stack Recommendations

### Core Framework
- **React Native** with Expo for cross-platform mobile development
- **TypeScript** for type safety and better development experience
- **Expo CLI** for development, building, and deployment
- **React Context** for lightweight state management

### UI Components
- **Pure React Native components** (no external UI libraries)
- **React Native core components** (View, Text, TouchableOpacity, etc.)
- **Custom styling** with StyleSheet API
- **Responsive design** using flexbox and responsive dimensions

### Offline-First Persistence
- **AsyncStorage** for local data persistence on mobile devices
- **React Native File System** for additional storage needs if required
- **Data serialization** for complex object storage

### Mobile-First Development
- **Large touch targets** (minimum 44px for gym use)
- **High contrast design** for gym lighting conditions
- **One-handed operation** support
- **Battery optimization** for extended gym sessions

## Architecture Guidelines

### Component Structure (4 Main Components as Specified)
```
src/
├── components/
│   ├── Header/        # Product name and status message
│   ├── Moves/         # Exercise selection buttons
│   ├── Keypad/        # Numeric input and actions
│   └── Log/           # Workout log display
├── context/           # React Context providers
├── services/          # Data persistence services
├── types/             # TypeScript type definitions
├── utils/             # Utility functions
└── screens/           # Screen components
```

### Component Design Principles
- **Single Responsibility**: Each component has one clear purpose
- **Composition over Inheritance**: Use composition patterns
- **Props Interface**: Always define TypeScript interfaces for props
- **Pure Functions**: Prefer pure components when possible
- **Custom Hooks**: Extract reusable logic into custom hooks

### State Management
- **Local State**: Use `useState` for component-specific state
- **Global State**: React Context for app-wide state (workout, moves, settings)
- **Persistent State**: AsyncStorage for offline data storage

## Development Guidelines

### Code Style
- Use **functional components** with hooks
- Prefer **arrow functions** for components
- Use **destructuring** for props and state
- Implement **error boundaries** for robust error handling
- Write **unit tests** for critical components

### Performance
- Use **React.memo** for expensive components
- Optimize **re-renders** with proper state management
- Use **useCallback** and **useMemo** judiciously
- Minimize **bundle size** for faster app loading

### Accessibility
- Follow **mobile accessibility** guidelines
- Use semantic React Native components
- Implement proper touch targets (44px minimum)
- Provide clear visual feedback
- Test with screen readers

## Feature Requirements

### Core Features (Based on layout-and-use-cases.md)
1. **Workout Tracking**
   - Create and track workouts in real-time
   - Track exercises, sets, reps, weights
   - Timer functionality for sets
   - Workout completion

2. **Exercise Selection**
   - Predefined exercise buttons (bench press, pull up, squat, etc.)
   - Large, easy-to-tap buttons
   - Visual selection feedback

3. **Data Entry**
   - Numeric keypad for weight and reps
   - Clear input display
   - Action buttons (Enter, Change Move, End Workout)

4. **Workout Log**
   - Real-time log display
   - Formatted workout data
   - Scrollable text area

5. **Offline Functionality**
   - Full offline operation
   - Local data persistence
   - No internet connection required

### Data Models (From layout-and-use-cases.md)
```typescript
interface Workout {
  id: string;
  startTime: Date;
  endTime?: Date;
  notes?: string;
  sets: Set[];
}

interface Set {
  id: string;
  moveName: string;
  weight: number;
  reps: number[];
  startTime: Date;
  endTime?: Date;
  notes?: string;
}
```

## Development Workflow

### Setup Commands
```bash
# Initialize React Native project with Expo
npx create-expo-app@latest r-track-workout --template typescript
cd r-track-workout

# Install dependencies
npm install @react-native-async-storage/async-storage
npm install react-native-testing-library jest-expo
npm install -D @types/react @types/react-native
```

### File Naming Conventions
- **Components**: PascalCase (e.g., `Header.tsx`)
- **Hooks**: camelCase with 'use' prefix (e.g., `useWorkout.ts`)
- **Utilities**: camelCase (e.g., `formatDate.ts`)
- **Types**: PascalCase (e.g., `WorkoutTypes.ts`)

### Testing Strategy
- **Unit Tests**: Jest + React Native Testing Library
- **Component Tests**: Individual component testing
- **Integration Tests**: Workflow testing

## Android Deployment
- **Expo Build Service** for APK generation
- **Google Play Store** deployment
- **App signing** and certificates
- **Store listing** materials

## Mobile-Specific Considerations
- **Large touch targets** for gym use (44px minimum)
- **High contrast** for poor lighting conditions
- **Battery optimization** for extended use
- **Offline-first** architecture
- **Simple, intuitive** interface for distracted users
- **One-handed operation** support

## Future Considerations
- **Push Notifications** for workout reminders
- **Data export** for backup and analysis
- **Custom exercises** addition
- **Progress tracking** and statistics
- **Wearable integration** for automatic tracking

description:mobile first react native project-wide rules and instructions applied always
globs:[]
alwaysApply: true
---
